pipeline {
    agent any

    environment {
        AWS_DEFAULT_REGION = 'us-east-1'
        EKS_CLUSTER_NAME = 'Dev'
        SSH_PUBLIC_KEY = 'DevOps_key_Pair' // Consider using Jenkins Secret Text credential
        ROLE_ARN = 'arn:aws:iam::767397897837:role/JenkinsEKSRole'

        DOCKER_HUB_CREDENTIALS_ID = 'maldive' // If using Docker Hub
        DOCKER_REGISTRY = 'hub.docker.com' // Update for your Docker registry URL
        APP_NAME = 'Lemuel'
        K8S_NAMESPACE = 'prod'
    }

    stages {
        stage('Assume IAM Role') {
            steps {
                script {
                    // Assume IAM role and set temporary credentials as environment variables
                    sh "eval \$(aws sts assume-role --role-arn ${ROLE_ARN} --role-session-name jenkins-session --output env)"
                }
            }
        }

        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Build and Push Docker Image (Multi-arch)') {
            steps {
                script {
                    // Build multi-architecture Docker image
                    sh "docker buildx build --platform linux/arm64,linux/amd64 -t ${DOCKER_REGISTRY}/${APP_NAME}:gracious ."

                    // Use Docker Hub credentials if applicable
                    sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD} ${DOCKER_REGISTRY}"

                    // Push the Docker image to the registry
                    sh "docker push ${DOCKER_REGISTRY}/${APP_NAME}:latest"
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                script {
                    // Define waitForDeploymentReady method
                    def waitForDeploymentReady() {
                        // Your method implementation
                        echo "Waiting for deployment to be ready..."
                        // Add your deployment readiness check logic here
                    }

                    // Other steps
                    echo "Deploying to EKS..."
                }
            }
        }
    }

    post {
        always {
            cleanWs() // Clean up workspace after each build
        }
        success {
            // Optional: Send notification on successful builds
        }
        failure {
            // Optional: Send notification on build failures
        }
    }
}
